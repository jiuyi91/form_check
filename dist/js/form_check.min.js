!function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){var n,s,a;!function(r,i){let l=i(r);e&&"string"!=typeof e.nodeName?t.exports=l:(s=[e],void 0===(a="function"==typeof(n=l)?n.apply(e,s):n)||(t.exports=a)),r.form_check=l}(this,(function(t,e){"use strict";let r=window,n=document,s=t=>{if("string"==typeof t&&(t=n.querySelector(t)),t&&t.tagName)return t;console.error("form_check:请检查你传入的元素是否正确。")},a={},i={},l=(t,e)=>{i[t]?console.error(t+"校验的名字已用过，请重新取一个名，已有的可在“yi_public.form_check._check_list”中查到"):i[t]=e},o={notice:t=>{t.tips.classList.remove("error_tips"),t.tips.classList.remove("warn_tips"),t.rev?t.tips.innerHTML="":(t.tips.innerHTML=t.msg||"","blur"===t.type&&t.tips.classList.add("error_tips"),"focus"===t.type&&t.tips.classList.add("warn_tips"))},content:t=>{if(t.target=s(t.target),t.tips=t.tips&&s(t.tips),t.tips||(t.tips=n.createElement("span"),((t,e)=>{let r=e.parentNode;r.lastChild==e?r.appendChild(t):r.insertBefore(t,e.nextSibling)})(t.tips,t.target)),t.tips.classList.add("input_tips"),t.target.__form_check__content)return void console.error("此元素不能绑两次校验",t.target);t.target.__form_check__content=!0;let e=null,r=()=>{t.result&&clearInterval(e);let r=t.target.value||"",n=i[t.check]({val:r,check:i});return o.notice({target:t.target,tips:t.tips,msg:n.MSG,rev:n.REV,type:"blur"}),n.REV},l=t.form_name||"0";return a[l]=a[l]||[],a[l].push({_fn:r,_obj:t}),t.target.addEventListener("blur",r,!1),t.target.addEventListener("focus",()=>{t.result&&(clearInterval(e),e=setInterval(()=>{let e=t.target.value||"",r=i[t.check]({val:e,check:i});r.target=t.target,r.tips=t.tips,t.result(r)},600)),o.notice({target:t.target,tips:t.tips,msg:t.entry,rev:!t.entry,type:"focus"})},!1),{target:t.target,tips:t.tips}},check:t=>{t.tips=t.tips&&s(t.tips);let e=i[t.check]({val:t.val,check:i});return t.tips&&o.notice({tips:t.tips,msg:e.MSG,rev:e.REV,type:"blur"}),e.REV},must:t=>{let e,r=!0,n=!0,s=a[t||"0"]||[];for(let t=0;t<s.length;t++){let a=s[t]._fn();s[t]._obj.required&&(e=!0,a||(n=a)),a||(r=a)}return e?n:r},set_check:l,_check_list:i};return l("is_empty",t=>{let e=t.val,r="",n=!0;return""!=e&&null!=e||(n=!1,r="不能为空"),{REV:n,MSG:r}}),l("is_email",t=>{let e=t.val,r=t.check.is_empty(t),n=r.REV,s=r.MSG;return n&&!/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(e)&&(n=!1,s="请输入正确的邮箱"),{REV:n,MSG:s}}),l("phone",t=>{let e=t.val.replace(/(^\s*)|(\s*$)/g,""),r=t.check.is_empty(t),n=r.REV,s=r.MSG;return n&&!/^(1)[3|4|5|6|7|8|9]\d{9}$/.test(e)&&(n=!1,s="请输入正确的手机号"),{REV:n,MSG:s}}),l("real_name",t=>{let e=t.val,r=t.check.is_empty(t),n=r.REV,s=r.MSG;return n&&!/^\s*[\u4e00-\u9fa5]{1,}[\u4e00-\u9fa5.?]{0,15}[\u4e00-\u9fa5]{1,}\s*$/.test(e)||e.length>20?(n=!1,s="请输入正确真实姓名"):e.indexOf(" ")>-1&&(n=!1,s="不能有空格"),{REV:n,MSG:s}}),l("address",t=>{let e,r=t.val,n=t.check.is_empty(t),s=n.REV,a=n.MSG;return s&&/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g.test(r)&&(e=r.match(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g)||[],s=!1,a="不得含有("+e.join(" ")+")"),{REV:s,MSG:a}}),l("id_card",t=>{let e=t.val,r=e.length,n=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2,1],s=[1,0,10,9,8,7,6,5,4,3,2],a=0,i=t.check.is_empty(t),l=i.REV,o=i.MSG;var c,u,p,f;return l&&(l&&15==r?(c=e.substring(6,8),u=e.substring(8,10),p=e.substring(10,12),((f=new Date(c,parseFloat(u)-1,parseFloat(p))).getYear()!=parseFloat(c)||f.getMonth()!=parseFloat(u)-1||f.getDate()!=parseFloat(p))&&(l=!1,o="请输入正确身份证号码")):l&&18==r&&function(){var e=0,r=t.val.split("");"x"==r[17].toLowerCase()&&(r[17]=10);for(var i=0;i<17;i++)e+=n[i]*r[i];return a=e%11,r[17]==s[a]}()&&function(){var t=e.substring(6,10),r=e.substring(10,12),n=e.substring(12,14),s=new Date(t,parseFloat(r)-1,parseFloat(n));return s.getFullYear()==parseFloat(t)&&s.getMonth()==parseFloat(r)-1&&s.getDate()==parseFloat(n)}()||(l=!1,o="请输入正确身份证号码")),{REV:l,MSG:o}}),r.yi_public=r.yi_public||{},r.yi_public.form_check=o,o}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,